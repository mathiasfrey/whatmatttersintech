---
title: "Cannot Deliver Roadmap"
date: 2019-06-07T22:06:44+02:00
draft: false
tags = []
categories = []
---

Help me, my developers cannot deliver what we have on our roadmap

I’ve seen this cry for help many, many times. It may come in slightly different flavors but the issue of the business people wanting much more than the IT people can deliver is universal: You’ll see it in small startups, in large corporations, both in product development and in operations, in the tech industry itself as well as in other industries where IT is simply a supporting function within the bigger organization.

As this problem is so ubiquitous there’s no single answer to it. But there’s hope: In tech, whenever you’re facing a problem which is either huge and manifold you’re well advised to apply a pattern called Divide & Conquer. Split the big issue into several smaller, actually digestable ones and you will succeed.

Divide & conquer
Let’s look at the “magic” triangle of project management now. Although this model implies a couple of linkages that are simply wrong in IT – e.g. that investing in quality would always slow you down – it’s perfectly fine for our problem of a development team that just cannot fulfill the wishes of their business stakeholders. The triangle knows three dimensions: cost, time and scope.

Cost: No low-hanging fruits here
When adding money in IT output does not necessarily scale as expected. In traditional engineering projects an almost linear correlation can often be observed: Add a third excavator and your hole-digging gets 50% faster done. Buy the higher priced tiles and your bathroom’s flooring will be more durable.

But this just won’t work out so easily in IT. In here the mechanical, deterministic world of probably complicated machinery is replaced by a social, chaotic reality of definitely complex knowledge workers. “Hiring will slow us down” or “Outsourcing X will lead to a maintenance nightmare and communication overhead” are just two of your team’s concerns you will be facing whenever you try to get more output faster using money.

Playing with cost in your development project’s triangular equation will almost never give you results fast. If you need to increase output in the long run – via internal hiring or outsourcing – start today though. There’s never a good time to onboard people and the ideal state when your platform can actually better deal with outsourced components will never be reached unless you solve the problems you can only see by embarking on this journey right now.

Time: Expectations written in stone
Your company’s calendar is hitting you with one important deadline after another in an unforgiving manner. The main problem with time is that in IT projects it’s really hard to estimate how long stuff takes. Actually hard up to a point that estimating effort in working hours, days or whatever unit is pretty useless. (Let’s not get side-tracked here with the necessity of having or the methods of doing estimations.) The main point is, people in IT are navigating complex environments and therefore knowing how long stuff takes is tricky. However, most of the projects I’ve seen had more or less concrete deadlines already set. No matter how “agile” you are, there’s always a stakeholder who wants to see results – a customer waiting for some feature, a marketing department having booked a world-changing media campaign, an investor who should be impressed before your company has run out of cash.

Don’t stretch timelines of your development project as this makes problems only bigger because they will surface even later. In any case, it’s a safe bet your real problem to tackle is…

Scope: Are we doing what we should?
With adding resources yielding output only slowly and time being tied to fixed expectations anyhow we’re stuck to scope: And actually this is the main dimension in IT projects where it’s advisable to constantly configure the equation to deliver a project successfully. A configuration that must be done by IT and business together, based on mutual understanding and trust.

The obvious question now is, how much of scope do I need? There’s a plethora of literature on how to cut down scope, create so-called minimum viable products (MVPs), deliver fast and only then increment based on real customer feedback, follow the 80/20 rule… it’s an endless list of key skills that make up a good product manager.

I’ve never seen a product-developing team that would not have had understood the critical task of adjusting scope to feasibility according to lean methodologies. However, once unnecessary requirements were dropped (aka “postponed” for the cowards) the essential ones remained on the roadmaps – poorly described and thus unverifiable.

Hidden perspectives on scope
Do we all have the same understanding of the scope?
When is this amount of scope actually reached at quality expected?
How to get from the first to the second most efficiently?
Surprisingly only the third question is one that is purely related to your development team – and thus something we usually call dev capacity, the scarcest thing of all.

Think about this for a second: Yes, delivering less has its advantaged. Yes, having an efficient development has its advantages. But there are two things almost always neglected: Clarity and acceptance criteria.

I’ve seen a lot of development projects where roadmaps where not fulfilled – and it has almost always been lacking capacity which was blamed for this. But when I looked deeper into the actual problems I saw developers sitting in meetings, collecting design assets, test data or other stuff they needed to finish their work
– in short: Resolving dependencies that were not at all related to what’s considered programming work.

Unfortunately our industry’s subtleties lead to euphemisms. chaos is called agility, and Java experts procuring coffee is called cross-functional.

Clarity in scope means reaching a mutually agreed upon understanding of what exactly needs to be done.

Sit together
Visualize solutions
Don’t discuss abstract problems, show examples
Make people complain as early as possible
Question things, especially the obvious ones as everyone will be clear about those anyhow – but everyone differently

Acceptance criteria